import React, { useState, useEffect } from 'react';
import { View, Text, Switch, StyleSheet, ScrollView, TouchableOpacity, Alert } from 'react-native';
import { useTheme } from '../theme';
import { useAppDispatch, useAppSelector } from '../store';
import { updateSettings } from '../store/settingsSlice';

const SettingsScreen = () => {
  const { theme, colorScheme, setColorScheme, colorPalette, setColorPalette } = useTheme() as any;
  const dispatch = useAppDispatch();
  const { settings } = useAppSelector((state) => state.settings);
  const [localSettings, setLocalSettings] = useState(settings);

  // Các màu sắc có sẵn để chọn
  const availablePalettes = [
    { id: 'blue', name: 'Xanh dương' },
    { id: 'green', name: 'Xanh lá' },
    { id: 'purple', name: 'Tím' },
  ];

  // Các đơn vị tiền tệ
  const availableCurrencies = [
    { id: 'VND', name: 'Việt Nam Đồng' },
    { id: 'USD', name: 'US Dollar' },
  ];

  // Cập nhật cài đặt khi có thay đổi
  useEffect(() => {
    dispatch(updateSettings(localSettings));
  }, [localSettings, dispatch]);

  const toggleSwitch = (setting: string) => {
    setLocalSettings((prev: any) => ({
      ...prev,
      [setting]: !prev[setting],
    }));
  };

  const changeTheme = (newTheme: 'light' | 'dark' | 'system') => {
    setColorScheme(newTheme);
    setLocalSettings((prev: any) => ({
      ...prev,
      theme: newTheme,
    }));
  };

  const changeCurrency = (newCurrency: string) => {
    setLocalSettings((prev: any) => ({
      ...prev,
      currency: newCurrency,
    }));
  };

  const handleExportData = () => {
    Alert.alert('Thông báo', 'Tính năng đang được phát triển');
  };

  return (
    <ScrollView 
      style={[styles.container, { backgroundColor: theme.colors.background }]}
      contentContainerStyle={styles.contentContainer}
    >
      {/* Phần giao diện */}
      <View style={[styles.section, { backgroundColor: theme.colors.card }]}>
        <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>
          Giao diện
        </Text>
        
        <View style={styles.settingItem}>
          <View>
            <Text style={[styles.settingText, { color: theme.colors.text }]}>
              Chế độ tối
            </Text>
            <Text style={[styles.settingDescription, { color: theme.colors.textSecondary }]}>
              Bật/tắt chế độ tối cho ứng dụng
            </Text>
          </View>
          <Switch
            value={colorScheme === 'dark'}
            onValueChange={(value) => changeTheme(value ? 'dark' : 'light')}
            trackColor={{ false: '#767577', true: theme.colors.primary }}
            thumbColor={colorScheme === 'dark' ? theme.colors.card : '#f4f3f4'}
          />
        </View>

        <View style={styles.settingItem}>
          <View>
            <Text style={[styles.settingText, { color: theme.colors.text }]}>
              Tự động theo hệ thống
            </Text>
            <Text style={[styles.settingDescription, { color: theme.colors.textSecondary }]}>
              Tự động điều chỉnh theo cài đặt hệ thống
            </Text>
          </View>
          <Switch
            value={colorScheme === 'system'}
            onValueChange={(value) => changeTheme(value ? 'system' : 'light')}
            trackColor={{ false: '#767577', true: theme.colors.primary }}
            thumbColor={colorScheme === 'system' ? theme.colors.card : '#f4f3f4'}
          />
        </View>
      </View>

      {/* Phần màu sắc */}
      <View style={[styles.section, { backgroundColor: theme.colors.card }]}>
        <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>
          Màu sắc chủ đạo
        </Text>
        <View style={styles.paletteContainer}>
          {availablePalettes.map((palette) => (
            <TouchableOpacity
              key={palette.id}
              style={[
                styles.paletteButton,
                colorPalette === palette.id && {
                  backgroundColor: theme.colors.primary,
                  borderColor: theme.colors.primary,
                },
                { borderColor: theme.colors.border },
              ]}
              onPress={() => setColorPalette(palette.id as 'blue' | 'green' | 'purple')}
            >
              <View
                style={[
                  styles.paletteColor,
                  { 
                    backgroundColor: 
                      palette.id === 'blue' ? '#2196F3' :
                      palette.id === 'green' ? '#4CAF50' :
                      '#9C27B0' 
                  },
                ]}
              />
              <Text
                style={[
                  styles.paletteText,
                  { 
                    color: colorPalette === palette.id ? 
                      theme.colors.card : 
                      theme.colors.text 
                  },
                ]}
              >
                {palette.name}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
      </View>

      {/* Phần tiền tệ */}
      <View style={[styles.section, { backgroundColor: theme.colors.card }]}>
        <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>
          Đơn vị tiền tệ
        </Text>
        <View style={styles.currencyContainer}>
          {availableCurrencies.map((currency) => (
            <TouchableOpacity
              key={currency.id}
              style={[
                styles.currencyButton,
                localSettings.currency === currency.id && {
                  backgroundColor: theme.colors.primary,
                  borderColor: theme.colors.primary,
                },
                { borderColor: theme.colors.border },
              ]}
              onPress={() => changeCurrency(currency.id)}
            >
              <Text
                style={[
                  styles.currencyText,
                  { 
                    color: localSettings.currency === currency.id ? 
                      theme.colors.card : 
                      theme.colors.text 
                  },
                ]}
              >
                {currency.name}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
      </View>

      {/* Phần dữ liệu */}
      <View style={[styles.section, { backgroundColor: theme.colors.card }]}>
        <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>
          Dữ liệu
        </Text>
        <TouchableOpacity
          style={[styles.button, { backgroundColor: theme.colors.primary }]}
          onPress={handleExportData}
        >
          <Text style={[styles.buttonText, { color: theme.colors.card }]}>
            Xuất dữ liệu
          </Text>
        </TouchableOpacity>
      </View>

      {/* Phần thông tin ứng dụng */}
      <View style={[styles.section, { backgroundColor: theme.colors.card }]}>
        <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>
          Thông tin
        </Text>
        <View style={styles.infoItem}>
          <Text style={[styles.infoLabel, { color: theme.colors.textSecondary }]}>
            Phiên bản
          </Text>
          <Text style={[styles.infoValue, { color: theme.colors.text }]}>
            1.0.0
          </Text>
        </View>
        <View style={styles.infoItem}>
          <Text style={[styles.infoLabel, { color: theme.colors.textSecondary }]}>
            Nhà phát triển
          </Text>
          <Text style={[styles.infoValue, { color: theme.colors.text }]}>
            Vi Nhớ Team
          </Text>
        </View>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  contentContainer: {
    padding: 16,
  },
  section: {
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 16,
  },
  settingItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(0,0,0,0.1)',
  },
  settingText: {
    fontSize: 16,
  },
  settingDescription: {
    fontSize: 12,
    opacity: 0.7,
    marginTop: 2,
  },
  paletteContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginTop: 8,
  },
  paletteButton: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
    borderRadius: 8,
    margin: 4,
    borderWidth: 1,
  },
  paletteColor: {
    width: 24,
    height: 24,
    borderRadius: 12,
    marginRight: 8,
  },
  paletteText: {
    fontSize: 14,
    fontWeight: '500',
  },
  currencyContainer: {
    flexDirection: 'row',
    marginTop: 8,
  },
  currencyButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    borderWidth: 1,
    marginRight: 8,
  },
  currencyText: {
    fontSize: 14,
    fontWeight: '500',
  },
  button: {
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: 8,
  },
  buttonText: {
    fontSize: 16,
    fontWeight: '500',
  },
  infoItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(0,0,0,0.1)',
  },
  infoLabel: {
    fontSize: 14,
  },
  infoValue: {
    fontSize: 14,
    fontWeight: '500',
  },
});

export default SettingsScreen;
